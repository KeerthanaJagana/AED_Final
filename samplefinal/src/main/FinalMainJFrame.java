/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;

import Model.PSH_Business;
import Model.PSH_Customer;
import UI.CelebrationsAdminRole.PSH_CelebrationPlannerAdminJPanel;
import UI.CelebrationsAdminRole.PSH_EnterpriseCatJPanel;
import UI.CelebrationsAdminRole.PSH_EnterpriseCatManagerJPanel;
import UI.CelebrationsAdminRole.PSH_LocationsJPanel;
import UI.CelebrationsAdminRole.PSH_ManageCustomersJPanel;
import UI.CustomerRole.PSH_CustomerJPanel;
import db.dbUtils;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author keerthanajagana
 */
public class FinalMainJFrame extends javax.swing.JFrame {

    private PSH_Business enterpriseAdmin;
    private String userName;
    private String password;
    /**
     * Creates new form FinalMainJFrame
     */
    public FinalMainJFrame() {
        initComponents();
        this.enterpriseAdmin= dbUtils.getInstance().retrieveSystem();
        logoutBtn.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        lognBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        logoutBtn = new javax.swing.JButton();
        pwd = new javax.swing.JTextField();
        uname = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel1.setBackground(new java.awt.Color(255, 204, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lognBtn.setText("Login");
        lognBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lognBtnActionPerformed(evt);
            }
        });
        jPanel1.add(lognBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 120, -1, -1));

        jLabel1.setText("Username");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 68, -1, -1));

        jLabel2.setText("Password");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, -1, -1));

        logoutBtn.setText("Logout");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });
        jPanel1.add(logoutBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 120, -1, -1));

        pwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdActionPerformed(evt);
            }
        });
        jPanel1.add(pwd, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 60, 90, -1));

        uname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unameActionPerformed(evt);
            }
        });
        jPanel1.add(uname, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, 90, -1));

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));

        jLabel3.setFont(new java.awt.Font("Zapfino", 1, 24)); // NOI18N
        jLabel3.setText("Atlantis, The Palm Hotel");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(320, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(206, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lognBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lognBtnActionPerformed
        // TODO add your handling code here:
        this.userName = uname.getText();
        this.password = pwd.getText();

        if (enterpriseAdmin.validateUserNamePassword(userName, password)) {
            String type = enterpriseAdmin.findUserType(userName);

            switch (type) {
                case "admin":

                PSH_CelebrationPlannerAdminJPanel systemAd = new PSH_CelebrationPlannerAdminJPanel(enterpriseAdmin, this::renderNetworkPanel, this::renderEnterprisePanel, this::renderManagerPanel, this::renderCustomerPanel);
                jSplitPane1.setRightComponent(systemAd);
                break;

//                case "Customer":
//                renderCustomer(userName);
//                break;
//
//                case "Entertainment":
//                renderEntertainmentManager(userName);
//                break;
//
//                case "Catering":
//                renderCateringManager(userName);
//                break;
//
//                case "Resort":
//                resortSupervisorPanel();
//                break;
//
//                case "Event":
//                eventManagerPanel();
//                break;
//                case "BirthdayParty":
//                WorkRequestForEvent();
//                break;
//                case "Meeting":
//                WorkRequestForEvent();
//                break;
//                case "Wedding":
//                WorkRequestForEvent();
//                break;
//                case "ServiceAgent":
//                WorkRequestForEvent();
//                break;
//                case "TourGuide":
//                WorkRequestForEvent();
//                break;
//                case "CarService":
//                WorkRequestForEvent();
//                break;
//                case "Magician":
//                WorkRequestForEvent();
//                break;
//                case "Singer":
//                WorkRequestForEvent();
//                break;
//                case "Choreographer":
//                WorkRequestForEvent();
//                break;
                default:
                JOptionPane.showMessageDialog(this, "Type not supported.");
                return;
            }
            uname.setText("");
            pwd.setText("");
            lognBtn.setEnabled(false);
            logoutBtn.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "Invalid username or password");
        }
    }//GEN-LAST:event_lognBtnActionPerformed

    private void pwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pwdActionPerformed

    private void unameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unameActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void renderSystemAdminPanel() {
        jSplitPane1.setRightComponent(new PSH_CelebrationPlannerAdminJPanel(enterpriseAdmin, this::renderNetworkPanel, this::renderEnterprisePanel, this::renderManagerPanel, this::renderCustomerPanel));
    }
    
    
    private void renderNetworkPanel() {
        PSH_LocationsJPanel network1 = new PSH_LocationsJPanel(enterpriseAdmin, this::renderSystemAdminPanel);
        jSplitPane1.setRightComponent(network1);
    }
    private void renderEnterprisePanel() {
        PSH_EnterpriseCatJPanel enterprise = new PSH_EnterpriseCatJPanel(enterpriseAdmin, this::renderSystemAdminPanel);
        jSplitPane1.setRightComponent(enterprise);
    }

    private void renderCustomerPanel() {
        PSH_ManageCustomersJPanel customer = new PSH_ManageCustomersJPanel(enterpriseAdmin, this ::renderSystemAdminPanel);
//        RS_ManageClientJPanel client = new RS_ManageClientJPanel(EPAdmin, this::renderSystemAdminPanel);
        jSplitPane1.setRightComponent(customer);
    }

    private void renderManagerPanel() {
        PSH_EnterpriseCatManagerJPanel manager = new PSH_EnterpriseCatManagerJPanel(enterpriseAdmin, this::renderSystemAdminPanel);
        jSplitPane1.setRightComponent(manager);
    }
    
//    private void renderCustomer(String username) {
//      
//        PSH_Customer client = enterpriseAdmin.getCustomerDirectory().findCustomerUsername(username);
//        PSH_CustomerJPanel clientPanel = new PSH_CustomerJPanel(enterpriseAdmin, this::renderBookHallRoomPanel, this::manageBooking);
//        jSplitPane1.setRightComponent(clientPanel);
//    }
//
//    private void renderBookHallRoomPanel() {
//        PSH_RoomBookingJPanel bookrhalloomPanel = new RS_ResortBookingServicesJPanel(enterpriseAdmin, this::manageClientPanel, userName);
//        jSplitPane1.setRightComponent(bookrhalloomPanel);
//    }
//
//    private void manageBooking() {
//        RS_ManageBooking manageBookingPanel = new RS_ManageBooking(enterpriseAdmin, this::manageClientPanel, this::addServices, this::viewService, userName);
//        jSplitPane1.setRightComponent(manageBookingPanel);
//    }
//
//    private void manageClientPanel() {
//        jSplitPane1.setRightComponent(new RS_ClientJPanel(enterpriseAdmin, this::renderBookHallRoomPanel, this::manageBooking));
//    }
//
//    private void addServices(RS_HallBooking booking) {
//        RS_AddServiceJPanel service = new RS_AddServiceJPanel(enterpriseAdmin, this::bookEvent, this::placeOrder, this::healthPanel,
//                this::resortService, this::manageBooking, userName, booking);
//        jSplitPane1.setRightComponent(service);
//    }
//
//    private void bookEvent(RS_HallBooking booking) {
//        RS_ServiceBookEventJPanel event = new RS_ServiceBookEventJPanel(enterpriseAdmin, this::addServices, userName, booking);
//        jSplitPane1.setRightComponent(event);
//    }
//
//    private void placeOrder(RS_HallBooking booking) {           //customer order from catering
//        RS_CateringServicePanel order = new RS_CateringServicePanel(enterpriseAdmin, this::addServices, userName, booking);
//        jSplitPane1.setRightComponent(order);
//    }
//
//    private void healthPanel(RS_HallBooking booking) {             // healthclub panel for client
//        RS_EntertainmentServicesJPanel healthClub = new RS_EntertainmentServicesJPanel(enterpriseAdmin, this::addServices, userName, booking);
//        jSplitPane1.setRightComponent(healthClub);
//    }
//
//    private void resortService(RS_HallBooking booking) {    //laundary and transport service panel fpr client
//        RS_OtherServicePanel resortPanel = new RS_OtherServicePanel(enterpriseAdmin, this::addServices, userName, booking);
//        jSplitPane1.setRightComponent(resortPanel);
//    }
//
//    private void viewService(RS_HallBooking booking) {
//        RS_ReportServiceDetailsPanel viewService = new RS_ReportServiceDetailsPanel(enterpriseAdmin, this::manageBooking, userName, booking);
//        jSplitPane1.setRightComponent(viewService);
//    }
//
//    private void renderEntertainmentManager(String username) {
//        List<RS_ServiceLocation> location = enterpriseAdmin.getListOfServiceLocation();
//        for (int i = 0; i < location.size(); i++) {
//            List<RS_BC_Entertainment> entertainment = location.get(i).getBusinessCatalogueDirectory().getListOfEntertainment();
//            for (int j = 0; j < entertainment.size(); j++) {
//                List<RS_Supervisor> supervisor = entertainment.get(j).getListOfSupervisor();
//                for (int k = 0; k < supervisor.size(); k++) {
//                    if (supervisor.get(k).getUsername().equals(username)) {
//                        RS_EntertainmentSupervisorPanel entertainmentSupervisorPanel = new RS_EntertainmentSupervisorPanel(enterpriseAdmin, this::viewTaskPanel, this::createOrganization,
//                                this::organizationAdminPanel);
//                        jSplitPane1.setRightComponent(entertainmentSupervisorPanel);
//
//                    }
//                }
//            }
//        }
//    }
//
//    private RS_ServiceLocation findUserNetworkForHealthClub() {
//        List<RS_ServiceLocation> location = enterpriseAdmin.getListOfServiceLocation();
//        for (int i = 0; i < location.size(); i++) {
//            List<RS_BC_Entertainment> entertainment = location.get(i).getBusinessCatalogueDirectory().getListOfEntertainment();
//            for (int j = 0; j < entertainment.size(); j++) {
//                List<RS_Supervisor> supervisor = entertainment.get(j).getListOfSupervisor();
//                for (int k = 0; k < supervisor.size(); k++) {
//                    if (supervisor.get(k).getUsername().equals(userName)) {
//                        return location.get(i);
//
//                    }
//                }
//            }
//        }
//        return null;
//    }
//
//    private RS_BusinessCatalogue findUserHealthClub() {
//        List<RS_ServiceLocation> location = enterpriseAdmin.getListOfServiceLocation();
//        for (int i = 0; i < location.size(); i++) {
//            List<RS_BC_Entertainment> entertainment = location.get(i).getBusinessCatalogueDirectory().getListOfEntertainment();
//            for (int j = 0; j < entertainment.size(); j++) {
//                List<RS_Supervisor> supervisor = entertainment.get(j).getListOfSupervisor();
//                for (int k = 0; k < supervisor.size(); k++) {
//                    if (supervisor.get(k).getUsername().equals(userName)) {
//                        return entertainment.get(j);
//                    }
//                }
//            }
//        }
//        return null;
//    }
//
//    private void viewTaskPanel() {   //view task for entertainment club
//        String type = enterpriseAdmin.findUserType(userName);
//        RS_BC_Entertainment entertainment = (RS_BC_Entertainment) findUserHealthClub();
//        RS_DisplayDashboardPanel displayDashboard = new RS_DisplayDashboardPanel(EPAdmin, this::healthClubManagerPanel, userName, type, entertainment
//        );
//        jSplitPane.setRightComponent(displayDashboard);
//    }
//
//    private void createOrganization() {
//        RS_ServiceLocation location = findUserNetworkForHealthClub();
//        RS_SuperviseOrganizationPanel org = new RS_SuperviseOrganizationPanel(EPAdmin, this::healthClubManagerPanel, userName, location);
//        jSplitPane.setRightComponent(org);
//    }
//
//    private void organizationAdminPanel() {   //create org admin for entertainment club
//        String type = EPAdmin.findUserType(userName);
//        RS_ServiceLocation location = findUserNetworkForHealthClub();
//        RS_OrganizationAdminPanel orgAdmin = new RS_OrganizationAdminPanel(EPAdmin, this::healthClubManagerPanel, userName, type, location);
//        jSplitPane.setRightComponent(orgAdmin);
//    }
//
//    private void healthClubManagerPanel() {   //go back to healthclub
//        jSplitPane.setRightComponent(new RS_EntertainmentSupervisorPanel(EPAdmin, this::viewTaskPanel, this::createOrganization, this::organizationAdminPanel));
//    }
//
//    private void renderCateringManager(String username) {
//        List<RS_ServiceLocation> location = EPAdmin.getListOfServiceLocation();
//        for (int i = 0; i < location.size(); i++) {
//            List<RS_BC_Catering> catering = location.get(i).getBusinessCatalogueDirectory().getListOfCatering();
//            for (int j = 0; j < catering.size(); j++) {
//                List<RS_Supervisor> supervisor = catering.get(j).getListOfSupervisor();
//                for (int k = 0; k < supervisor.size(); k++) {
//                    if (supervisor.get(k).getUsername().equals(username)) {
//                        RS_CateringMainPanel cateringAssign = new RS_CateringMainPanel(EPAdmin, this::renderViewTask1, this::renderCateringOrg, this::renderCateringAdmin, this::addOrderPanel);
//                        jSplitPane.setRightComponent(cateringAssign);
//                    }
//                }
//            }
//        }
//    }
//
//    private RS_ServiceLocation findUserLocationForCatering() {
//        List<RS_ServiceLocation> location = EPAdmin.getListOfServiceLocation();
//        for (int i = 0; i < location.size(); i++) {
//            List<RS_BC_Catering> catering = location.get(i).getBusinessCatalogueDirectory().getListOfCatering();
//            for (int j = 0; j < catering.size(); j++) {
//                List<RS_Supervisor> supervisor = catering.get(j).getListOfSupervisor();
//                for (int k = 0; k < supervisor.size(); k++) {
//                    if (supervisor.get(k).getUsername().equals(userName)) {
//                        return location.get(i);
//
//                    }
//                }
//            }
//        }
//        return null;
//    }
//
//    private RS_BusinessCatalogue findUserCatering() {
//        List<RS_ServiceLocation> location = EPAdmin.getListOfServiceLocation();
//        for (int i = 0; i < location.size(); i++) {
//            List<RS_BC_Catering> catering = location.get(i).getBusinessCatalogueDirectory().getListOfCatering();
//            for (int j = 0; j < catering.size(); j++) {
//                List<RS_Supervisor> supervisor = catering.get(j).getListOfSupervisor();
//                for (int k = 0; k < supervisor.size(); k++) {
//                    if (supervisor.get(k).getUsername().equals(userName)) {
//                        return catering.get(j);
//                    }
//                }
//            }
//        }
//        return null;
//    }
//
//    private void renderViewTask1() {
//        String type = EPAdmin.findUserType(userName);
//        RS_BC_Catering catering = (RS_BC_Catering) findUserCatering();
//        RS_ViewTaskPanelCatering resMan = new RS_ViewTaskPanelCatering(EPAdmin, this::cateringManagerPanel, userName, type, catering);
//        jSplitPane.setRightComponent(resMan);
//    }
//
//    private void renderCateringOrg() {
//        String type = EPAdmin.findUserType(userName);
//        RS_ServiceLocation location = findUserLocationForCatering();
//        RS_ManageOrgPanelForCatering org = new RS_ManageOrgPanelForCatering(EPAdmin, this::cateringManagerPanel, userName, type, location
//        );
//        jSplitPane.setRightComponent(org);
//    }
//
//    private void renderCateringAdmin() { //create organisation admin under restauarant
//        String type = EPAdmin.findUserType(userName);
//        RS_ServiceLocation location = findUserLocationForCatering();
//        RS_ManageOrgAdminForCatering orgAdmin = new RS_ManageOrgAdminForCatering(EPAdmin, this::cateringManagerPanel, userName, type, location);
//        jSplitPane.setRightComponent(orgAdmin);
//    }
//
//    private void addOrderPanel() {
//        String type = EPAdmin.findUserType(userName);
//        RS_ServiceLocation location = findUserLocationForCatering();
//        RS_AddOrderJPanel order = new RS_AddOrderJPanel(EPAdmin, this::cateringManagerPanel, userName, type, location);
//        jSplitPane.setRightComponent(order);
//    }
//
//    private void cateringManagerPanel() {
//        jSplitPane.setRightComponent(new RS_CateringMainPanel(EPAdmin, this::renderViewTask1, this::renderCateringOrg,
//                this::renderCateringAdmin, this::addOrderPanel));
//    }
//
//    private void renderResortManager(String username) {   //hotel panel
//        List<RS_ServiceLocation> location = EPAdmin.getListOfServiceLocation();
//        for (int i = 0; i < location.size(); i++) {
//            List<RS_BC_Resort> hotel = location.get(i).getBusinessCatalogueDirectory().getListOfResort();
//            for (int j = 0; j < hotel.size(); j++) {
//                List<RS_Supervisor> supervisor = hotel.get(j).getListOfSupervisor();
//                for (int k = 0; k < supervisor.size(); k++) {
//                    if (supervisor.get(k).getUsername().equals(username)) {
//                        RS_ResortMainPanel resortPanel = new RS_ResortMainPanel(EPAdmin, this::renderViewTask2, this::renderResortOrg,
//                                this::renderResortAdmin, this::renderRoomPanel);
//                        jSplitPane.setRightComponent(resortPanel);
//
//                    }
//                }
//            }
//        }
//    }
//
//    private RS_ServiceLocation findUserLocationForResort() {
//        List<RS_ServiceLocation> location = EPAdmin.getListOfServiceLocation();
//        for (int i = 0; i < location.size(); i++) {
//            List<RS_BC_Resort> resort = location.get(i).getBusinessCatalogueDirectory().getListOfResort();
//            for (int j = 0; j < resort.size(); j++) {
//                List<RS_Supervisor> supervisor = resort.get(j).getListOfSupervisor();
//                for (int k = 0; k < supervisor.size(); k++) {
//                    if (supervisor.get(k).getUsername().equals(userName)) {
//                        System.out.println("manager found is " + supervisor.get(k).getUsername() + " and city is " + location.get(i));
//                        return location.get(i);
//                    }
//                }
//            }
//        }
//        return null;
//    }
//
//    private RS_BusinessCatalogue findManagerHotel() {
//        List<RS_ServiceLocation> location = EPAdmin.getListOfServiceLocation();
//        for (int i = 0; i < location.size(); i++) {
//            List<RS_BC_Resort> resort = location.get(i).getBusinessCatalogueDirectory().getListOfResort();
//            for (int j = 0; j < resort.size(); j++) {
//                List<RS_Supervisor> supervisor = resort.get(j).getListOfSupervisor();
//                for (int k = 0; k < supervisor.size(); k++) {
//                    if (supervisor.get(k).getUsername().equals(userName)) {
//                        return resort.get(j);
//                    }
//                }
//            }
//        }
//        return null;
//    }
//
//    private void renderViewTask2() {
//        String type = EPAdmin.findUserType(userName);
//        RS_BC_Resort resort = (RS_BC_Resort) findManagerHotel();
//        RS_DisplayOrderForResort resortPanel = new RS_DisplayOrderForResort(EPAdmin, this::resortSupervisorPanel, userName, type, resort);
//        jSplitPane.setRightComponent(resortPanel);
//    }
//
//    private void renderResortOrg() {
//        String type = EPAdmin.findUserType(userName);
//        RS_ServiceLocation location1 = findUserLocationForResort();
//        RS_SuperviseOrgForResort org = new RS_SuperviseOrgForResort(EPAdmin, this::resortSupervisorPanel, userName, type, location1);
//        jSplitPane.setRightComponent(org);
//    }
//
//    private void renderResortAdmin() {
//        String type = EPAdmin.findUserType(userName);
//        RS_ServiceLocation location1 = findUserLocationForResort();
//
//        RS_SuperviseAdminOrgForResort orgAdmin = new RS_SuperviseAdminOrgForResort(EPAdmin, this::resortSupervisorPanel, userName, type, location1);
//        jSplitPane.setRightComponent(orgAdmin);
//    }
//
//    private void renderRoomPanel() {
//        RS_ServiceLocation location = findUserLocationForResort();
//        RS_SuperviseRoomPanel room = new RS_SuperviseRoomPanel(EPAdmin, this::resortSupervisorPanel, location, userName);
//        jSplitPane.setRightComponent(room);
//    }
//
//    private void resortSupervisorPanel() {
//        jSplitPane.setRightComponent(new RS_ResortMainPanel(EPAdmin, this::renderViewTask2, this::renderResortOrg, this::renderResortAdmin, this::renderRoomPanel));
//    }
//
//    private void renderEventManager(String username) {
//        List<RS_ServiceLocation> location = EPAdmin.getListOfServiceLocation();
//        for (int i = 0; i < location.size(); i++) {
//            List<RS_BC_Events> event = location.get(i).getBusinessCatalogueDirectory().getListOfEvents();
//            for (int j = 0; j < event.size(); j++) {
//                List<RS_Supervisor> supervisor = event.get(j).getListOfSupervisor();
//                for (int k = 0; k < supervisor.size(); k++) {
//                    if (supervisor.get(k).getUsername().equals(username)) {
//                        RS_EventSupervisorPanel eventPanel = new RS_EventSupervisorPanel(EPAdmin, this::renderViewTask3, this::renderEventOrg,
//                                this::renderEventAdmin);
//                        jSplitPane.setRightComponent(eventPanel);
//
//                    }
//                }
//            }
//        }
//    }
//
//    private RS_ServiceLocation findUserlocationForEvents() {
//        List<RS_ServiceLocation> location = EPAdmin.getListOfServiceLocation();
//        for (int i = 0; i < location.size(); i++) {
//            List<RS_BC_Events> event = location.get(i).getBusinessCatalogueDirectory().getListOfEvents();
//            for (int j = 0; j < event.size(); j++) {
//                List<RS_Supervisor> supervisor = event.get(j).getListOfSupervisor();
//                for (int k = 0; k < supervisor.size(); k++) {
//                    if (supervisor.get(k).getUsername().equals(userName)) {
//                        return location.get(i);
//
//                    }
//                }
//            }
//        }
//        return null;
//    }
//
//    private RS_BusinessCatalogue findUserEnterprise() {
//        List<RS_ServiceLocation> location = EPAdmin.getListOfServiceLocation();
//        for (int i = 0; i < location.size(); i++) {
//            List<RS_BC_Events> event = location.get(i).getBusinessCatalogueDirectory().getListOfEvents();
//            for (int j = 0; j < event.size(); j++) {
//                List<RS_Supervisor> supervisor = event.get(j).getListOfSupervisor();
//                for (int k = 0; k < supervisor.size(); k++) {
//                    if (supervisor.get(k).getUsername().equals(userName)) {
//                        return event.get(j);
//                    }
//                }
//            }
//        }
//        return null;
//    }
//
//    private void WorkRequestForEvent() {
//        List<RS_ServiceLocation> location = EPAdmin.getListOfServiceLocation();
//        String type = EPAdmin.findUserType(userName);
//        for (int i = 0; i < location.size(); i++) {
//            RS_WorkRequestsForEventPanel workRequest = new RS_WorkRequestsForEventPanel(EPAdmin, userName, type);
//            jSplitPane1.setRightComponent(workRequest);
//        }
//    }
//
//    private void renderViewTask3() {     // view Business Event supervisor panel
//        String type = EPAdmin.findUserType(userName);
//        RS_BC_Events event = (RS_BC_Events) findUserEnterprise();
//        RS_DisplayEventPanel eventPanel = new RS_DisplayEventPanel(EPAdmin, this::eventManagerPanel, userName, type, event);
//        jSplitPane1.setRightComponent(eventPanel);
//    }
//
//    private void renderEventOrg() {     // add an organisation for event
//        String type = EPAdmin.findUserType(userName);
//        RS_ServiceLocation location = findUserlocationForEvents();
//        RS_SuperviseEventOrg org = new RS_SuperviseEventOrg(EPAdmin, this::eventManagerPanel, userName, type, location);
//        jSplitPane1.setRightComponent(org);
//    }
//
//    private void renderEventAdmin() { //create organisation admin under event
//        String type = EPAdmin.findUserType(userName);
//        RS_ServiceLocation location = findUserlocationForEvents();
//        RS_SuperviseAdminEventOrganisation orgAdmin = new RS_SuperviseAdminEventOrganisation(EPAdmin, this::eventManagerPanel, userName, type, location);
//        jSplitPane1.setRightComponent(orgAdmin);
//    }
//
//    private void eventManagerPanel() {    //go back to event supervisor panel
//        jSplitPane1.setRightComponent(new RS_EventSupervisorPanel(EPAdmin, this::renderViewTask3, this::renderEventOrg, this::renderEventAdmin));
//    }
//    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinalMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinalMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinalMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinalMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FinalMainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton lognBtn;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JTextField pwd;
    private javax.swing.JTextField uname;
    // End of variables declaration//GEN-END:variables
}
