/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;

import Model.PSH_Business;
import Model.PSH_Customer;
import Model.PSH_EnterCatag_Celebration;
import Model.PSH_EnterCatag_Hotel;
import Model.PSH_EnterCatag_Restaurant;
import Model.PSH_EnterCatag_Theatre;
import Model.PSH_EnterpriseCatalog;
import Model.PSH_Manager;
import Model.PSH_RoomBooking;
import Model.PSH_location;
import UI.CelebrationManagerRole.PSH_CelebManagerPanelJPanel;
import UI.CelebrationManagerRole.PSH_DisplayCelebPanelJPanel;
import UI.CelebrationManagerRole.PSH_ManageAdminCelebOrgJPanel;
import UI.CelebrationManagerRole.PSH_ManageCelebOrgJPanel;
import UI.CelebrationsAdminRole.PSH_CelebrationPlannerAdminJPanel;
import UI.CelebrationsAdminRole.PSH_EnterpriseCatJPanel;
import UI.CelebrationsAdminRole.PSH_EnterpriseCatManagerJPanel;
import UI.CelebrationsAdminRole.PSH_LocationsJPanel;
import UI.CelebrationsAdminRole.PSH_ManageCustomersJPanel;
import UI.Confirmation.PSH_WorkRequestCelebrationJPanel;
import UI.CustomerRole.PSH_ChooseServicesJPanel;
import UI.CustomerRole.PSH_CustomerBookingReportJPanel;
import UI.CustomerRole.PSH_CustomerJPanel;
import UI.CustomerRole.PSH_HotelBookingServicesJPanel;
import UI.CustomerRole.PSH_RestaurantServicesJPanel;
import UI.CustomerRole.PSH_RoomBookingJPanel;
import UI.CustomerRole.PSH_ServiceBookCelebJPanel;
import UI.CustomerRole.PSH_TheatreServicesPanel;
import UI.CustomerRole.PSH_TourSafariJPanel;
import UI.HotelManagerRole.PSH_HotelDisplayOrdersJPanel;
import UI.HotelManagerRole.PSH_HotelMainJPanel;
import UI.HotelManagerRole.PSH_HotelManagerAdminOrgJPanel;
import UI.HotelManagerRole.PSH_HotelManagerOrgJPanel;
import UI.HotelManagerRole.PSH_HotelManagerRoomJPanel;
import UI.RestaurantManagerRole.PSH_AddOrderJPanel;
import UI.RestaurantManagerRole.PSH_DisplayRestaurantTaskJPanel;
import UI.RestaurantManagerRole.PSH_ManageRestaurantOrgJPanel;
import UI.RestaurantManagerRole.PSH_RestaurantMainJPanel;
import UI.RestaurantManagerRole.PSH_RestaurantOrgAdminJPanel;
import UI.TheatreManagerRole.PSH_DashboardJPanel;
import UI.TheatreManagerRole.PSH_ManageOrgJPanel;
import UI.TheatreManagerRole.PSH_TheatreMangerJPanel;
import UI.TheatreManagerRole.PSH_TheatreOrgAdminJPanel;
import db.dbUtils;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author keerthanajagana
 */
public class FinalMainJFrame extends javax.swing.JFrame {

    private PSH_Business enterpriseAdmin;
    private String userName;
    private String password;
    /**
     * Creates new form FinalMainJFrame
     */
    public FinalMainJFrame() {
        initComponents();
        this.enterpriseAdmin= dbUtils.getInstance().retrieveSystem();
        logoutBtn.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        loginBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        logoutBtn = new javax.swing.JButton();
        pwd = new javax.swing.JTextField();
        uname = new javax.swing.JTextField();
        WorkArea = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel1.setBackground(new java.awt.Color(255, 204, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        loginBtn.setText("Login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });
        jPanel1.add(loginBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 120, -1, -1));

        jLabel1.setText("Username");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 68, -1, -1));

        jLabel2.setText("Password");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, -1, -1));

        logoutBtn.setText("Logout");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });
        jPanel1.add(logoutBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 120, -1, -1));

        pwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdActionPerformed(evt);
            }
        });
        jPanel1.add(pwd, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 60, 90, -1));

        uname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unameActionPerformed(evt);
            }
        });
        jPanel1.add(uname, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, 90, -1));

        jSplitPane1.setLeftComponent(jPanel1);

        WorkArea.setBackground(new java.awt.Color(204, 204, 255));

        jLabel3.setFont(new java.awt.Font("Zapfino", 1, 24)); // NOI18N
        jLabel3.setText("Atlantis, The Palm Hotel");

        javax.swing.GroupLayout WorkAreaLayout = new javax.swing.GroupLayout(WorkArea);
        WorkArea.setLayout(WorkAreaLayout);
        WorkAreaLayout.setHorizontalGroup(
            WorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WorkAreaLayout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(320, Short.MAX_VALUE))
        );
        WorkAreaLayout.setVerticalGroup(
            WorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WorkAreaLayout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(206, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(WorkArea);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        // TODO add your handling code here:
        this.userName = uname.getText();
        this.password = pwd.getText();

        if (enterpriseAdmin.validateUserNamePassword(userName, password)) {
            String type = enterpriseAdmin.findUserType(userName);

            switch (type) {
                case "admin":

                PSH_CelebrationPlannerAdminJPanel systemAd = new PSH_CelebrationPlannerAdminJPanel(enterpriseAdmin, this::renderNetworkPanel, this::renderEnterprisePanel, this::renderManagerPanel, this::renderCustomerPanel);
                jSplitPane1.setRightComponent(systemAd);
                break;

                case "Customer":
                renderCustomer(userName);
                break;

                case "Theatre":
                renderEntertainmentManager(userName);
                break;

                case "Restaurant":
                renderCateringManager(userName);
                break;

                case "Hotel":
                resortSupervisorPanel();
                break;

                case "Celebration":
                eventManagerPanel();
                break;
                case "BirthdayParty":
                WorkRequestForEvent();
                break;
                case "Anniversary":
                WorkRequestForEvent();
                break;
                case "Wedding":
                WorkRequestForEvent();
                break;
                case "DeliveryAgent":
                WorkRequestForEvent();
                break;
                case "TourGuide":
                WorkRequestForEvent();
                break;
                case "SafariService":
                WorkRequestForEvent();
                break;
                case "Magician":
                WorkRequestForEvent();
                break;
                case "MusicBand":
                WorkRequestForEvent();
                break;
                case "StandUpComedy":
                WorkRequestForEvent();
                break;
                default:
                JOptionPane.showMessageDialog(this, "Type not supported.");
                return;
            }
            uname.setText("");
            pwd.setText("");
            loginBtn.setEnabled(false);
            logoutBtn.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "Invalid username or password");
        }
    }//GEN-LAST:event_loginBtnActionPerformed

    private void pwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pwdActionPerformed

    private void unameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unameActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        // TODO add your handling code here:
         System.out.println("Logout called.");
        dbUtils.getInstance().storeSystem(enterpriseAdmin);
        jSplitPane1.setRightComponent(WorkArea);
        loginBtn.setEnabled(true);
        logoutBtn.setEnabled(false);
        uname.setText("");
        pwd.setText("");
        System.out.println("Logout success.");
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void renderSystemAdminPanel() {
        jSplitPane1.setRightComponent(new PSH_CelebrationPlannerAdminJPanel(enterpriseAdmin, this::renderNetworkPanel, this::renderEnterprisePanel, this::renderManagerPanel, this::renderCustomerPanel));
    }
    
    
    private void renderNetworkPanel() {
        PSH_LocationsJPanel network1 = new PSH_LocationsJPanel(enterpriseAdmin, this::renderSystemAdminPanel);
        jSplitPane1.setRightComponent(network1);
    }
    private void renderEnterprisePanel() {
        PSH_EnterpriseCatJPanel enterprise = new PSH_EnterpriseCatJPanel(enterpriseAdmin, this::renderSystemAdminPanel);
        jSplitPane1.setRightComponent(enterprise);
    }

    private void renderCustomerPanel() {
        PSH_ManageCustomersJPanel customer = new PSH_ManageCustomersJPanel(enterpriseAdmin, this ::renderSystemAdminPanel);
//        RS_ManageClientJPanel client = new RS_ManageClientJPanel(EPAdmin, this::renderSystemAdminPanel);
        jSplitPane1.setRightComponent(customer);
    }

    private void renderManagerPanel() {
        PSH_EnterpriseCatManagerJPanel manager = new PSH_EnterpriseCatManagerJPanel(enterpriseAdmin, this::renderSystemAdminPanel);
        jSplitPane1.setRightComponent(manager);
    }
    
    private void renderCustomer(String username) {
      
        PSH_Customer client = enterpriseAdmin.getCustomerDirectory().findCustomerUsername(username);
        PSH_CustomerJPanel clientPanel = new PSH_CustomerJPanel(enterpriseAdmin, this::renderBookHallRoomPanel, this::manageBooking);
        jSplitPane1.setRightComponent(clientPanel);
    }

    private void renderBookHallRoomPanel() {
        PSH_HotelBookingServicesJPanel bookrhalloomPanel = new PSH_HotelBookingServicesJPanel(enterpriseAdmin, this::manageClientPanel, userName);
        jSplitPane1.setRightComponent(bookrhalloomPanel);
    }

    private void manageBooking() {
        PSH_RoomBookingJPanel manageBookingPanel = new PSH_RoomBookingJPanel(enterpriseAdmin, this::manageClientPanel, this::addServices, this::viewService, userName);
        jSplitPane1.setRightComponent(manageBookingPanel);
    }

    private void manageClientPanel() {
        jSplitPane1.setRightComponent(new PSH_CustomerJPanel(enterpriseAdmin, this::renderBookHallRoomPanel, this::manageBooking));
    }

    private void addServices(PSH_RoomBooking booking) {
        PSH_ChooseServicesJPanel service = new PSH_ChooseServicesJPanel(enterpriseAdmin, this::bookEvent, this::placeOrder, this::healthPanel,
                this::resortService, this::manageBooking, userName, booking);
        jSplitPane1.setRightComponent(service);
    }

    private void bookEvent(PSH_RoomBooking booking) {
        PSH_ServiceBookCelebJPanel event = new PSH_ServiceBookCelebJPanel(enterpriseAdmin, this::addServices, userName, booking);
        jSplitPane1.setRightComponent(event);
    }

    private void placeOrder(PSH_RoomBooking booking) {           //customer order from catering
        PSH_RestaurantServicesJPanel order = new PSH_RestaurantServicesJPanel(enterpriseAdmin, this::addServices, userName, booking);
        jSplitPane1.setRightComponent(order);
    }

    private void healthPanel(PSH_RoomBooking booking) {             // healthclub panel for client
        PSH_TheatreServicesPanel healthClub = new PSH_TheatreServicesPanel(enterpriseAdmin, this::addServices, userName, booking);
        jSplitPane1.setRightComponent(healthClub);
    }

    private void resortService(PSH_RoomBooking booking) {    //laundary and transport service panel fpr client
        PSH_TourSafariJPanel resortPanel = new PSH_TourSafariJPanel(enterpriseAdmin, this::addServices, userName, booking);
        jSplitPane1.setRightComponent(resortPanel);
    }

    private void viewService(PSH_RoomBooking booking) {
        PSH_CustomerBookingReportJPanel viewService = new PSH_CustomerBookingReportJPanel(enterpriseAdmin, this::manageBooking, userName, booking);
        jSplitPane1.setRightComponent(viewService);
    }

    private void renderEntertainmentManager(String username) {
        List<PSH_location> location = enterpriseAdmin.getListOfLocation();
        for (int i = 0; i < location.size(); i++) {
            List<PSH_EnterCatag_Theatre> entertainment = location.get(i).getEnterpriseCatalogDirectory().getListOfTheatre();
            for (int j = 0; j < entertainment.size(); j++) {
                List<PSH_Manager> supervisor = entertainment.get(j).getListOfManager();
                for (int k = 0; k < supervisor.size(); k++) {
                    if (supervisor.get(k).getUsername().equals(username)) {
                        PSH_TheatreMangerJPanel entertainmentSupervisorPanel = new PSH_TheatreMangerJPanel(enterpriseAdmin, this::viewTaskPanel, this::createOrganization,
                                this::organizationAdminPanel);
                        jSplitPane1.setRightComponent(entertainmentSupervisorPanel);

                    }
                }
            }
        }
    }

    private PSH_location findUserNetworkForHealthClub() {
        List<PSH_location> location = enterpriseAdmin.getListOfLocation();
        for (int i = 0; i < location.size(); i++) {
            List<PSH_EnterCatag_Theatre> entertainment = location.get(i).getEnterpriseCatalogDirectory().getListOfTheatre();
            for (int j = 0; j < entertainment.size(); j++) {
                List<PSH_Manager> supervisor = entertainment.get(j).getListOfManager();
                for (int k = 0; k < supervisor.size(); k++) {
                    if (supervisor.get(k).getUsername().equals(userName)) {
                        return location.get(i);

                    }
                }
            }
        }
        return null;
    }

    private PSH_EnterpriseCatalog findUserHealthClub() {
        List<PSH_location> location = enterpriseAdmin.getListOfLocation();
        for (int i = 0; i < location.size(); i++) {
            List<PSH_EnterCatag_Theatre> entertainment = location.get(i).getEnterpriseCatalogDirectory().getListOfTheatre();
            for (int j = 0; j < entertainment.size(); j++) {
                List<PSH_Manager> supervisor = entertainment.get(j).getListOfManager();
                for (int k = 0; k < supervisor.size(); k++) {
                    if (supervisor.get(k).getUsername().equals(userName)) {
                        return entertainment.get(j);
                    }
                }
            }
        }
        return null;
    }

    private void viewTaskPanel() {   //view task for entertainment club
        String type = enterpriseAdmin.findUserType(userName);
        PSH_EnterCatag_Theatre entertainment = (PSH_EnterCatag_Theatre) findUserHealthClub();
        PSH_DashboardJPanel displayDashboard = new PSH_DashboardJPanel(enterpriseAdmin, this::healthClubManagerPanel, userName, type, entertainment
        );
        jSplitPane1.setRightComponent(displayDashboard);
    }

    private void createOrganization() {
        PSH_location location = findUserNetworkForHealthClub();
        PSH_ManageOrgJPanel org = new PSH_ManageOrgJPanel(enterpriseAdmin, this::healthClubManagerPanel, userName, location);
        jSplitPane1.setRightComponent(org);
    }

    private void organizationAdminPanel() {   //create org admin for entertainment club
        String type = enterpriseAdmin.findUserType(userName);
        PSH_location location = findUserNetworkForHealthClub();
        PSH_TheatreOrgAdminJPanel orgAdmin = new PSH_TheatreOrgAdminJPanel(enterpriseAdmin, this::healthClubManagerPanel, userName, type, location);
        jSplitPane1.setRightComponent(orgAdmin);
    }

    private void healthClubManagerPanel() {   //go back to healthclub
        jSplitPane1.setRightComponent(new PSH_TheatreMangerJPanel(enterpriseAdmin, this::viewTaskPanel, this::createOrganization, this::organizationAdminPanel));
    }

    private void renderCateringManager(String username) {
        List<PSH_location> location = enterpriseAdmin.getListOfLocation();
        for (int i = 0; i < location.size(); i++) {
            List<PSH_EnterCatag_Restaurant> catering = location.get(i).getEnterpriseCatalogDirectory().getListOfRestaurants();
            for (int j = 0; j < catering.size(); j++) {
                List<PSH_Manager> supervisor = catering.get(j).getListOfManager();
                for (int k = 0; k < supervisor.size(); k++) {
                    if (supervisor.get(k).getUsername().equals(username)) {
                        PSH_RestaurantMainJPanel cateringAssign = new PSH_RestaurantMainJPanel(enterpriseAdmin, this::renderViewTask1, this::renderCateringOrg, this::renderCateringAdmin, this::addOrderPanel);
                        jSplitPane1.setRightComponent(cateringAssign);
                    }
                }
            }
        }
    }

    private PSH_location findUserLocationForCatering() {
        List<PSH_location> location = enterpriseAdmin.getListOfLocation();
        for (int i = 0; i < location.size(); i++) {
            List<PSH_EnterCatag_Restaurant> catering = location.get(i).getEnterpriseCatalogDirectory().getListOfRestaurants();
            for (int j = 0; j < catering.size(); j++) {
                List<PSH_Manager> supervisor = catering.get(j).getListOfManager();
                for (int k = 0; k < supervisor.size(); k++) {
                    if (supervisor.get(k).getUsername().equals(userName)) {
                        return location.get(i);

                    }
                }
            }
        }
        return null;
    }

    private PSH_EnterpriseCatalog findUserCatering() {
        List<PSH_location> location = enterpriseAdmin.getListOfLocation();
        for (int i = 0; i < location.size(); i++) {
            List<PSH_EnterCatag_Restaurant> catering = location.get(i).getEnterpriseCatalogDirectory().getListOfRestaurants();
            for (int j = 0; j < catering.size(); j++) {
                List<PSH_Manager> supervisor = catering.get(j).getListOfManager();
                for (int k = 0; k < supervisor.size(); k++) {
                    if (supervisor.get(k).getUsername().equals(userName)) {
                        return catering.get(j);
                    }
                }
            }
        }
        return null;
    }

    private void renderViewTask1() {
        String type = enterpriseAdmin.findUserType(userName);
        PSH_EnterCatag_Restaurant catering = (PSH_EnterCatag_Restaurant) findUserCatering();
        PSH_DisplayRestaurantTaskJPanel resMan = new PSH_DisplayRestaurantTaskJPanel(enterpriseAdmin, this::cateringManagerPanel, userName, type, catering);
        jSplitPane1.setRightComponent(resMan);
    }

    private void renderCateringOrg() {
        String type = enterpriseAdmin.findUserType(userName);
        PSH_location location = findUserLocationForCatering();
        PSH_ManageRestaurantOrgJPanel org = new PSH_ManageRestaurantOrgJPanel(enterpriseAdmin, this::cateringManagerPanel, userName, type, location
        );
        jSplitPane1.setRightComponent(org);
    }

    private void renderCateringAdmin() { //create organisation admin under restauarant
        String type = enterpriseAdmin.findUserType(userName);
        PSH_location location = findUserLocationForCatering();
        PSH_RestaurantOrgAdminJPanel orgAdmin = new PSH_RestaurantOrgAdminJPanel(enterpriseAdmin, this::cateringManagerPanel, userName, type, location);
        jSplitPane1.setRightComponent(orgAdmin);
    }

    private void addOrderPanel() {
        String type = enterpriseAdmin.findUserType(userName);
        PSH_location location = findUserLocationForCatering();
        PSH_AddOrderJPanel order = new PSH_AddOrderJPanel(enterpriseAdmin, this::cateringManagerPanel, userName, type, location);
        jSplitPane1.setRightComponent(order);
    }

    private void cateringManagerPanel() {
        jSplitPane1.setRightComponent(new PSH_RestaurantMainJPanel(enterpriseAdmin, this::renderViewTask1, this::renderCateringOrg,
                this::renderCateringAdmin, this::addOrderPanel));
    }

    private void renderResortManager(String username) {   //hotel panel
        List<PSH_location> location = enterpriseAdmin.getListOfLocation();
        for (int i = 0; i < location.size(); i++) {
            List<PSH_EnterCatag_Hotel> hotel = location.get(i).getEnterpriseCatalogDirectory().getListOfHotels();
            for (int j = 0; j < hotel.size(); j++) {
                List<PSH_Manager> supervisor = hotel.get(j).getListOfManager();
                for (int k = 0; k < supervisor.size(); k++) {
                    if (supervisor.get(k).getUsername().equals(username)) {
                        PSH_HotelMainJPanel resortPanel = new PSH_HotelMainJPanel(enterpriseAdmin, this::renderViewTask2, this::renderResortOrg,
                                this::renderResortAdmin, this::renderRoomPanel);
                        jSplitPane1.setRightComponent(resortPanel);

                    }
                }
            }
        }
    }

    private PSH_location findUserLocationForResort() {
        List<PSH_location> location = enterpriseAdmin.getListOfLocation();
        for (int i = 0; i < location.size(); i++) {
            List<PSH_EnterCatag_Hotel> resort = location.get(i).getEnterpriseCatalogDirectory().getListOfHotels();
            for (int j = 0; j < resort.size(); j++) {
                List<PSH_Manager> supervisor = resort.get(j).getListOfManager();
                for (int k = 0; k < supervisor.size(); k++) {
                    if (supervisor.get(k).getUsername().equals(userName)) {
                        System.out.println("manager found is " + supervisor.get(k).getUsername() + " and city is " + location.get(i));
                        return location.get(i);
                    }
                }
            }
        }
        return null;
    }

    private PSH_EnterpriseCatalog findManagerHotel() {
        List<PSH_location> location = enterpriseAdmin.getListOfLocation();
        for (int i = 0; i < location.size(); i++) {
            List<PSH_EnterCatag_Hotel> resort = location.get(i).getEnterpriseCatalogDirectory().getListOfHotels();
            for (int j = 0; j < resort.size(); j++) {
                List<PSH_Manager> supervisor = resort.get(j).getListOfManager();
                for (int k = 0; k < supervisor.size(); k++) {
                    if (supervisor.get(k).getUsername().equals(userName)) {
                        return resort.get(j);
                    }
                }
            }
        }
        return null;
    }

    private void renderViewTask2() {
        String type = enterpriseAdmin.findUserType(userName);
        PSH_EnterCatag_Hotel resort = (PSH_EnterCatag_Hotel) findManagerHotel();
        PSH_HotelDisplayOrdersJPanel resortPanel = new PSH_HotelDisplayOrdersJPanel(enterpriseAdmin, this::resortSupervisorPanel, userName, type, resort);
        jSplitPane1.setRightComponent(resortPanel);
    }

    private void renderResortOrg() {
        String type = enterpriseAdmin.findUserType(userName);
        PSH_location location1 = findUserLocationForResort();
        PSH_HotelManagerOrgJPanel org = new PSH_HotelManagerOrgJPanel(enterpriseAdmin, this::resortSupervisorPanel, userName, type, location1);
        jSplitPane1.setRightComponent(org);
    }

    private void renderResortAdmin() {
        String type = enterpriseAdmin.findUserType(userName);
        PSH_location location1 = findUserLocationForResort();

        PSH_HotelManagerAdminOrgJPanel orgAdmin = new PSH_HotelManagerAdminOrgJPanel(enterpriseAdmin, this::resortSupervisorPanel, userName, type, location1);
        jSplitPane1.setRightComponent(orgAdmin);
    }

    private void renderRoomPanel() {
        PSH_location location = findUserLocationForResort();
        PSH_HotelManagerRoomJPanel room = new PSH_HotelManagerRoomJPanel(enterpriseAdmin, this::resortSupervisorPanel, location, userName);
        jSplitPane1.setRightComponent(room);
    }

    private void resortSupervisorPanel() {
        jSplitPane1.setRightComponent(new PSH_HotelMainJPanel(enterpriseAdmin, this::renderViewTask2, this::renderResortOrg, this::renderResortAdmin, this::renderRoomPanel));
    }

    private void renderEventManager(String username) {
        List<PSH_location> location = enterpriseAdmin.getListOfLocation();
        for (int i = 0; i < location.size(); i++) {
            List<PSH_EnterCatag_Celebration> event = location.get(i).getEnterpriseCatalogDirectory().getListOfCelebrations();
            for (int j = 0; j < event.size(); j++) {
                List<PSH_Manager> supervisor = event.get(j).getListOfManager();
                for (int k = 0; k < supervisor.size(); k++) {
                    if (supervisor.get(k).getUsername().equals(username)) {
                        PSH_CelebManagerPanelJPanel eventPanel = new PSH_CelebManagerPanelJPanel(enterpriseAdmin, this::renderViewTask3, this::renderEventOrg,
                                this::renderEventAdmin);
                        jSplitPane1.setRightComponent(eventPanel);

                    }
                }
            }
        }
    }

    private PSH_location findUserlocationForEvents() {
        List<PSH_location> location = enterpriseAdmin.getListOfLocation();
        for (int i = 0; i < location.size(); i++) {
            List<PSH_EnterCatag_Celebration> event = location.get(i).getEnterpriseCatalogDirectory().getListOfCelebrations();
            for (int j = 0; j < event.size(); j++) {
                List<PSH_Manager> supervisor = event.get(j).getListOfManager();
                for (int k = 0; k < supervisor.size(); k++) {
                    if (supervisor.get(k).getUsername().equals(userName)) {
                        return location.get(i);

                    }
                }
            }
        }
        return null;
    }

    private PSH_EnterpriseCatalog findUserEnterprise() {
        List<PSH_location> location = enterpriseAdmin.getListOfLocation();
        for (int i = 0; i < location.size(); i++) {
            List<PSH_EnterCatag_Celebration> event = location.get(i).getEnterpriseCatalogDirectory().getListOfCelebrations();
            for (int j = 0; j < event.size(); j++) {
                List<PSH_Manager> supervisor = event.get(j).getListOfManager();
                for (int k = 0; k < supervisor.size(); k++) {
                    if (supervisor.get(k).getUsername().equals(userName)) {
                        return event.get(j);
                    }
                }
            }
        }
        return null;
    }

    private void WorkRequestForEvent() {
        List<PSH_location> location = enterpriseAdmin.getListOfLocation();
        String type = enterpriseAdmin.findUserType(userName);
        for (int i = 0; i < location.size(); i++) {
            PSH_WorkRequestCelebrationJPanel workRequest = new PSH_WorkRequestCelebrationJPanel(enterpriseAdmin, userName, type);
            jSplitPane1.setRightComponent(workRequest);
        }
    }

    private void renderViewTask3() {     // view Business Event supervisor panel
        String type = enterpriseAdmin.findUserType(userName);
        PSH_EnterCatag_Celebration event = (PSH_EnterCatag_Celebration) findUserEnterprise();
        PSH_DisplayCelebPanelJPanel eventPanel = new PSH_DisplayCelebPanelJPanel(enterpriseAdmin, this::eventManagerPanel, userName, type, event);
        jSplitPane1.setRightComponent(eventPanel);
    }

    private void renderEventOrg() {     // add an organisation for event
        String type = enterpriseAdmin.findUserType(userName);
        PSH_location location = findUserlocationForEvents();
        PSH_ManageCelebOrgJPanel org = new PSH_ManageCelebOrgJPanel(enterpriseAdmin, this::eventManagerPanel, userName, type, location);
        jSplitPane1.setRightComponent(org);
    }

    private void renderEventAdmin() { //create organisation admin under event
        String type = enterpriseAdmin.findUserType(userName);
        PSH_location location = findUserlocationForEvents();
        PSH_ManageAdminCelebOrgJPanel orgAdmin = new PSH_ManageAdminCelebOrgJPanel(enterpriseAdmin, this::eventManagerPanel, userName, type, location);
        jSplitPane1.setRightComponent(orgAdmin);
    }

    private void eventManagerPanel() {    //go back to event supervisor panel
        jSplitPane1.setRightComponent(new PSH_CelebManagerPanelJPanel(enterpriseAdmin, this::renderViewTask3, this::renderEventOrg, this::renderEventAdmin));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinalMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinalMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinalMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinalMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FinalMainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel WorkArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton loginBtn;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JTextField pwd;
    private javax.swing.JTextField uname;
    // End of variables declaration//GEN-END:variables
}
